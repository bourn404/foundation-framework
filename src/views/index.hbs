<!DOCTYPE html>
<html>
    <head>
        {{>head}}
        <script src="/js/app.js"></script>

    </head>
    <body>
        {{>header}}
            <div id="contacts-wrapper" class="list-box">
                <h2>Contacts</h2>
                <p><a id="contact-add" href="/contacts/add">Add New +</a></p>
                <form id="contact-add-form" class="hidden">
                    <label for="firstname">First Name</label>
                    <input type="text" name="firstname" id="firstname" required />
                    <label for="lastname">Last Name</label>
                    <input type="text" name="lastname" id="lastname" required />
                    <label for="phone">Phone Number</label>
                    <input type="text" name="phone" id="phone" required placeholder="+1 999-999-9999" />
                    <input type="submit" value="Save">
                </form>
                <p><strong>To initiate a call with the browser, click anywhere on the screen.  Then call 385-343-4563.</strong></p>
            </div>
            <div id="recent-calls-wrapper" class="list-box">
                <h2>Recent Calls</h2>
                <ul id="recent-calls"></ul>
            </div>
            <div id="dialer-wrapper" class="list-box">
                <h2>Dialer</h2>
            </div>
        {{>footer}}

        <script src="/socket.io/socket.io.js"></script>
        <script type="text/javascript" src="/js/twilio.min.js"></script>
        <script type="text/javascript" src="/js/axios.min.js"></script>
        
        <script>
            let addContactButton = document.getElementById("contact-add");
            let addContactForm = document.getElementById("contact-add-form");
            let firstnameField = document.getElementById("firstname");
            let lastnameField = document.getElementById("lastname");
            let phoneField = document.getElementById("phone");

            function addContact(firstname, lastname, phone, callback) {
                axios.post('/contact/add',{firstname,lastname,phone})
                .then((resp)=>{
                    callback(null,resp);
                });
            }

            function showFormAddContact() {
                // clear form fields
                addContactForm.reset();
                addContactForm.classList.remove('hidden');
            }

            addContactButton.addEventListener('click',(e)=>{
                e.preventDefault();
                console.log('Add Contact');
                showFormAddContact();
            })

            addContactForm.addEventListener('submit',(e)=>{
                e.preventDefault();
                addContact(firstnameField.value,lastnameField.value,phoneField.value,(err,resp)=>{
                    console.dir(resp);
                });
            })

            // TWILIO Calls
            let ringtone = new Audio('/audio/default_tone.mp3');
            ringtone.loop = true;
            let callConnect = new Audio('/audio/connected.mp3');


            let calls = [];
            let clientIdentity = "";
            let device;
            let checkedIn = false;
            let callInProgress = false;

            const socket = io();
            {{!-- socket.on('callComing',(data)=>{
                console.log(data);
                calls[0]=data;
                if(confirm('Call incoming.  Click ok to answer.')) {
                    answer(calls[0]);
                }
            }) --}}

            socket.on('callsUpdate',(data)=>{
                renderRecentCalls(data.recentCalls);
            })

            function answer(CallSid) {
                ringtone.pause();
                callInProgress = CallSid;
                if(checkedIn) {
                    axios.post('/voice/client/answer',{id:CallSid, clientIdentity: clientIdentity});
                } else {
                    checkIn((err, clientId) => {
                        axios.post('/voice/client/answer',{id:CallSid, clientIdentity: clientId});
                    })
                }
            }

            function hangup(CallSid) {
                axios.post('/voice/client/end',{id:CallSid, clientIdentity: clientIdentity});
                callInProgress = false;
            }

            function checkIn(callback) {
                axios.get('/voice/token')
                .then((resp)=>{
                    const device = new Twilio.Device();
                    device.setup(resp.data.token, {
                        sounds: {
                            incoming: '/audio/silent.mp3',
                            disconnect: '/audio/disconnected.mp3'
                        }
                    });
                    clientIdentity = resp.data.clientIdentity;
                    device.on('incoming',(conn)=>{
                        conn.accept();
                        callConnect.play();
                    });
                    callback(null,clientIdentity);
                });
            }

            function getRecentCalls(callback) {
                axios.get('/voice/recent')
                .then((resp)=>{
                    callback(null,resp.data.recentCalls);
                });
            }

            let formatPhoneNumber = (str) => {
                //Filter only numbers from the input
                let cleaned = ('' + str).replace(/\D/g, '');
                
                //Check if the input is of correct
                let match = cleaned.match(/^(1|)?(\d{3})(\d{3})(\d{4})$/);
                
                if (match) {
                    //Remove the matched extension code
                    //Change this to format for any country code.
                    let intlCode = (match[1] ? '+1 ' : '')
                    return [intlCode, '(', match[2], ') ', match[3], '-', match[4]].join('')
                }
                
                return null;
            }

            function renderRecentCalls(calls) {
                var list = document.getElementById('recent-calls');
                list.innerHTML = "";
                ringtone.pause();
                calls.forEach((call)=>{
                    let created = new Date(call.created);
                    created = new Date(Date.UTC(created.getFullYear(), created.getMonth(), created.getDate(), created.getHours(), created.getMinutes(), created.getSeconds()));
                    let createdString = created.toLocaleString('en-US', { timeZone: 'America/Denver' })
                    let newLI = document.createElement('li');
                    newLI.classList.add('call-'+call.status);
                    let actions = "";
                    let statusIcon = "";
                    switch(call.status) {
                        case 'ringing':
                            ringtone.play();
                            statusIcon = '<i class="fas fa-fw fa-phone-volume status-icon"></i>';
                            actions = `<a href='#' onclick='answer("${call.uid}")'>Answer</a>`;
                            break;
                        case 'in-progress':
                            statusIcon = '<i class="fas fa-spin fa-fw fa-spinner status-icon"></i>';
                            if(callInProgress == call.uid) {
                                actions = `<a href='#' onclick='hangup("${call.uid}")'>Hangup</a>`;
                            }
                            break;
                        case 'complete':
                            statusIcon = '<i class="fas fa-fw fa-arrow-down status-icon"></i>';
                            break;
                        case 'missed': 
                            statusIcon = '<i class="fas fa-fw fa-arrow-to-bottom status-icon"></i>';
                            break;
                    }

                    let from = formatPhoneNumber(call.from_number)
                    if(call.from_user) {
                        from = call.from_name;
                    } 

                    newLI.innerHTML = `<p class="from-number">${from}</p><p class="call-details">${statusIcon} ${createdString}</p><p>${actions}</p>`;
                    list.appendChild(newLI);
                })
            }

            getRecentCalls((err,calls)=>{
                renderRecentCalls(calls);
            })
        </script>



    </body>

</html>